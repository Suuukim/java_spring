[[주제1 : Interceptor]]

클라이언트요청(request)
	↓
Filter (doFilter( )메소드)	web.xml에서 설정
	↓
Dispatcher Servlet		FrontController, web.xml에서 설정
	↓
Interceptor (preHandle)	servlet-context.xml에서 설정
			여러개 인터셉터를 동작시킬 수 있다.
	↓
Controller (postHandle)	::메소드 매핑 (메소드 실행 전후에 처리될 반복될 동작
	↓
Interceptor (afterComletion)
	↓
DispatcherServlet	
	↓
Filter
	↓
클라이언트 응답 (response)

*스프링에는 AOP (spring-aop)
: 뿐만 아니 서비스(비지니스로직)에서도 적용될 수 있다.


[실습내용]
1. servlet-context.xml

<!-- 인터셉터 구현체를 빈으로 등록 -->
	<beans:bean id="testInterceptor" 
				class="com.mycompany.idev.interseptor.TestInterceptor"></beans:bean>
	<!-- 인터셉터의 동작 범위를 설정 -->
	<interceptors>
		<interceptor>
			<mapping path="/**/**"/>	
			<!-- 적용될 url(경로), 2단계 하위 디렉토리로 설정 *기호 모든 이름에 대해 -->
			<beans:ref bean="testInterceptor"/>
		</interceptor>
	</interceptors>

2. 인터셉터 구현체 생성
public class TestInterceptor implements HandlerInterceptor { }

ㄴ preHandle, postHandle, afterCompletion 메소드 3개는 각각 다른 시점에 동작합니다.
	: 인터페이스의 디폴트 메소드이며 반드시 구현해야하는 추상메소드가 아닙니다. 
		필요한 경우에만 정의하는 디폴트 메소드입니다.
ㄴ 위의 메소드는 모두 request, response 를 인자로 전달받습니다. (request, response 객체를 가로채기 후 변경가능.)
ㄴ postHandle은 ModelAndView (Model 객체와 view), 
	afterCompletion는 Exception이 발생할 경우 예외 정보 객체를 인자로 전달 받습니다.
ㄴ preHandle은 리턴타입이 boolean : 리턴을 false 로 하면 정해진 핸들러매핑메소드가 취소됩니다.


3. 인증 , 인가
인증 authentication : 사용자를 확인하는 로그인.
인가 authorization : 허가된 사용자의 사용범위를 허가. 예를 들면, 일반사용자와 관리자


ㄴ 인증 및 인가 작업에 preHandle 메소드에 로그인이 필요한 url에 대한 검사를 할 수 있습니다.
	--> 매핑되는 url을 변경합니다.



