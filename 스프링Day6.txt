//지난시간 복습

url 매핑 메소드의 매개변수로
Model model 선언 : mvc 모델2 방식에서 사용되는 데이터 저장 객체
-jsp로는 request.setAttribute ,session.setAttribute 와 같은 동작입니다.
-model.addAttribute메소드로 데이터 저장. 기본적으로는 request.setAttribute 라고 이해하세요.

@ModelAttribute : model 객체로 지정하는 어노테이션
@SessionAttributes : model 객체 중 session 범위에서 사용되도록 지정함.여러개를 배열로 지정할수 있음. 작성 위치는 컨트롤러 클래스 선언 위에서 합니다.
@SessionAttribute : session 에 저장된 model 객체 가져오기. 매핑 메소드 매개변수와 함께 작성.


//// Controller 클래스의 url 매핑 메소드 정리///

1. url과 메소드를 매핑하는 방법
2. view (jsp) 파일을 정하는 방법
3. 매핑 메소드에서 요청 처리 후 리다이렉트 하는 방법
4. 요청 method 방식이 get 또는 post 일때를 지정해서 매핑하는 어노테이션

5.view(jsp) 파일에서 controller 로 데이터를 전달하는 방법
6. controller 에서 view(jsp) 파일로 데이터를 전달하는 방법
7. 매핑 메소드에서 요청 처리 후 리다이렉트 할 때 파라미터를 보내는 방법
 
/////////////////////////////////////

6fileupload 로 프로젝트를 만드시고
-com.koreait.idev 로 groupID 를 하세요.

-5프로젝트와 똑같이 환경설정을 해놓으세요.
(xml 파일, 마이바티스 매퍼 xml은 같이 만듭니다.)


[[[[[파일 업로드에서 필요한 코드]]]]]

1. pom.xml 에 추가할 라이브러리
<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
      <dependency>
         <groupId>commons-fileupload</groupId>
         <artifactId>commons-fileupload</artifactId>
         <version>1.3</version>
      </dependency>



2. servlet-context.xml 추가

<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="104857600" />
		<beans:property name="maxUploadSizePerFile"
			value="20971520" />
		<beans:property name="defaultEncoding" value="utf-8" />
	</beans:bean>



3. jsp 파일에서 form 태그와 input 태그 작성
	<form action="gallery" method="post" enctype="multipart/form-data">
		<input type="text" placeholder="제목입력하세요."><br>
		이미지 파일을 선택하세요.(최대 3개)<br>
		<input type="file" name="pics" accept="image/*"><br>
		<input type="file" name="pics" accept="image/*"><br>
		<input type="file" name="pics" accept="image/*"><br>
		<button>전송</button>
	</form>

4. controller 에서 파일전송 받고 서버 업로드 폴더에 저장하기

@PostMapping("gallery")
	public void upload(Gallery vo) {
		//서버에서 전송받은 파일을 저장할 폴더를 정합니다. : c:\\upload
		String path = "c:\\upload";		//  \는 출력 또는 문자열로 지정할때는 두번씁니다.
		
		//서버에 전송된 내용 확인 테스트
		logger.info("title:" + vo.getTitle());
		for(MultipartFile f : vo.getPics()) {
			logger.info("파일명 : " + f.getOriginalFilename());  //전송받은 파일명
			logger.info("파일 크기 :" + f.getSize());
			logger.info("랜덤문자열 :" + UUID.randomUUID().toString());
			//서버에 저장할 파일객체를 생성합니다. : 생성자 인자는 파일객체의 경로와 파일명
//			File sfile = new File(path + "\\" + f.getOriginalFilename());
			String temp = f.getOriginalFilename();
			String ext = temp.substring(temp.indexOf('.'), temp.length());  //확장자만 추출
			File sfile = new File(path + "\\" + UUID.randomUUID().toString().substring(0, 8)+ext);
			//f.getOriginalFilename() 는 여러 접속자(사용자)가 중복된 이름을 사용할수 있어요.
			//-> 파일명은 서버에서 임의로 정해줄것입니다.
			try {
				// MultipartFile  f 로 전송받은 파일을 참조하고 있으므로 
				if(f.getSize() !=0)
				f.transferTo(sfile);		//서버에 저장할 파일객체로 전송합니다. (서버 업로드)
			} catch (IllegalStateException | IOException e) {
			    logger.info("파일 전송오류 : " + e.getMessage());
			} 
		}
		
	}
